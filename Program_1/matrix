#!/bin/bash

###############################################################################
##  Author:       Adam Wright
##  Email:        wrighada@oregonstate.edu
##  Date:         3-30-2020
##  Description:  Bash shell script with 5 callable functions
##                - dims [matrix] returns the dimensions of a valid matrix
##                - transpose [matrix] reflect the matrix elements MxN => NxM
##                - mean [matrix] returns means of each column of a matrix
##                - add [Matrix_left  Matrix_right] sums 2 equal dimension
##                  matrices element-wise
##                - multiply [Matrix_left  Matrix_right] returns to stdout the
##                  product of an MxN and NxP matrix and produce an MxP matrix 
###############################################################################


# Create unique temporary file
TMP="temp_file$$"

# A trap statement to erase TMP file on an interrupt signal
trap "rm -f $TMP; echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM


greet="Hello World"     # ERASE THIS 


# NAME
#   dims - returns the dimension of a valid matrix
# SYNOPSIS
#   dims [matrix]
# DESCRIPTION
#   Returns the row count and column count separated by a space to stdout
#   when it is given a valid matrix from stdin or a file

dims()
{
    row_count=0
    col_count=0

    # Loop through the file to count the rows
    while read cur_line
    do
        ((row_count++))
    done < $1

    # Count the number of words in line 1
    col_count=$(head -n 1 $1 | wc -w)

    echo $row_count $col_count

    rm -f "temp_file$$"
    exit 0
}


# NAME
#   transpose - reflect the matrix elements MxN => NxM
# SYNOPSIS
#   transpose [matrix]
# DESCRIPTION
#   Returns a new matrix to stdout with the elements reflected over the
#   diagonal when it is given a valid matrix from stdin or a file

transpose()
{

    echo $greet
    
    rm -f "temp_file$$"
    exit 0
}


# NAME
#   mean - returns the mean of each column of a valid matrix
# SYNOPSIS
#   mean [matrix]
# DESCRIPTION
#   Returns the mean of each column of a matrix to stdout when it is given
#   a valid matrix from stdin or a file

mean()
{
    echo $greet
    
    rm -f "temp_file$$"
    exit 0
}


# NAME
#   add - sums 2 equal dimension matrices element-wise
# SYNOPSIS
#   add [Matrix_left  Matrix_right]
# DESCRIPTION
#   Returns to stdout the matrix representing the element-wise sums of 2 equal
#   dimension matrices

add()
{
    echo $greet
    
    rm -f "temp_file$$"
    exit 0
}


# NAME
#   multiply - sums 2 equal dimension matrices element-wise
# SYNOPSIS
#   multiply [Matrix_left  Matrix_right]
# DESCRIPTION
#   Returns to stdout the product of an MxN and NxP matrix and to produce an
#   MxP matrix

multiply()
{
    echo $greet
    
    rm -f "temp_file$$"
    exit 0
}


# Validate that the number of arguments is between 1 and 3
[ $# -lt 1 ] && echo "Invalid command: No Function called" >&2
[ $? -eq 0 ] && exit 2

[ $# -gt 3 ] && echo "Invalid command: Too many arguments provided" >&2
[ $? -eq 0 ] && exit 3


# Check the argument count of the single arg functions 
if [ "$1" = "dims" ] || [ "$1" = "mean" ] || [ "$1" = "transpose" ]
then
    # Use TMP to hold the value of stdin or an existing file
    if [ "$#" = "1" ]
    then
        # Take in the stdin input
        cat > "$TMP"

        # Validate the input temp file from stdin and delete if malformed
        [ ! -f "$TMP" ] || [ ! -r "$TMP" ] && echo "Matrix file is invalid" >&2
        [ $? -eq 0 ] && rm -f "temp_file$$" && exit 4

    elif [ "$#" = "2" ]
    then
        # If a file was provided, then assign it to TMP
        TMP=$2

        # Validate the provided file
        [ ! -f "$TMP" ] || [ ! -r "$TMP" ] && echo "Matrix file is invalid" >&2
        [ $? -eq 0 ] && exit 5

    elif [ "$#" = "3" ]
    then
        echo -e "Invalid command: $1 only accepts 1 argument" >&2
        exit 6
    fi
fi


# Check the argument count of 2 arg functions
if [ "$1" = "add" ] || [ "$1" = "multiply" ]
then   
    # Verify the arg count
    [ $# -ne 3 ] && echo "Invalid command: 2 matrix files are required" >&2
    [ $? -eq 0 ] && exit 7

    # Validate matrix 1
    [ ! -f $2 ] || [ ! -r $2 ] && echo "Matrix file 1 is invalid" >&2
    [ $? -eq 0 ] && exit 8

    # Validate matrix 2
    [ ! -f $3 ] || [ ! -r $3 ] && echo "Matrix file 2 is invalid" >&2
    [ $? -eq 0 ] && exit 9
fi


# Call the requested bash function in arg 1 with all remaining arguments
case $1 in
    dims)
        $1 $TMP
    ;;
    transpose)
        $1 $TMP
    ;;
    mean)
        $1 $TMP
    ;;
    add)
        $1 "${@:2}"
    ;;
    multiply)
        $1 "${@:2}"
    ;;
    *)
        echo "No valid function called, exiting" 1>&2
        rm -f "temp_file$$"
        exit 10
    ;;
esac
